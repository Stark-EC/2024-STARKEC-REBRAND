!(function(g){var C={};function F(I){var Q;return(C[I]||(Q=C[I]={i:I,l:!1,exports:{}},g[I].call(Q.exports,Q,Q.exports,F),Q.l=!0,Q)).exports}F.m=g,F.c=C,F.d=function(I,Q,g){F.o(I,Q)||Object.defineProperty(I,Q,{enumerable:!0,get:g})},F.r=function(I){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(I,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(I,"__esModule",{value:!0})},F.t=function(Q,I){if(1&I&&(Q=F(Q)),8&I)return Q;if(4&I&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var g=Object.create(null);if(F.r(g),Object.defineProperty(g,"default",{enumerable:!0,value:Q}),2&I&&"string"!=typeof Q)for(var C in Q)F.d(g,C,function(I){return Q[I]}.bind(null,C));return g},F.n=function(I){var Q=I&&I.__esModule?function(){return I.default}:function(){return I};return F.d(Q,"a",Q),Q},F.o=function(I,Q){return Object.prototype.hasOwnProperty.call(I,Q)},F.p="/",F(F.s=627)})({627:function(module,exports){eval('/* eslint-disable */\nvar getLPformID = $(\'.splunk-form form\').attr(\'id\');\nvar formSuccessSubmit = true;\nvar dataUserFormType = $(\'.splunk-form\').attr(\'data-form-usage\');\nvar getFormUsage;\nif (dataUserFormType === \'talktosales\') {\n  getFormUsage = \'yes\';\n} else if (dataUserFormType === \'dataemail\') {\n  getFormUsage = \'dataemail\';\n} else if (dataUserFormType === \'sfdc\') {\n  getFormUsage = \'sfdcform\';\n} else if (dataUserFormType === \'pledgeform\') {\n  getFormUsage = \'pledgeform\';\n} else {\n  getFormUsage = \'no\';\n}\nif (getLPformID == "") {\n  getLPformID = "landingPageForm";\n}\nfunction enableSubmit() {\n  if ($form.find(".splunk-submit .splunk-btn").hasClass(\'darkForm\')) {\n    $form.find(".splunk-submit .splunk-btn").removeClass("sp-btn-hollow sp-btn-white disabled");\n    $form.find(".splunk-submit .splunk-btn").addClass("sp-btn-solid sp-btn-pink");\n    $form.find(".splunk-submit .splunk-btn").prop("disabled", false);\n  } else {\n    $form.find(".splunk-submit .splunk-btn").removeClass("sp-btn-hollow sp-btn-darkGray disabled");\n    $form.find(".splunk-submit .splunk-btn").addClass("sp-btn-solid sp-btn-pink");\n    $form.find(".splunk-submit .splunk-btn").prop("disabled", false);\n  }\n}\nfunction disableSubmit($form) {\n  if ($form.find(".splunk-submit .splunk-btn").hasClass(\'darkForm\')) {\n    $form.find(".splunk-submit .splunk-btn").removeClass("sp-btn-solid sp-btn-pink");\n    $form.find(".splunk-submit .splunk-btn").addClass("sp-btn-hollow sp-btn-white disabled");\n    $form.find(".splunk-submit .splunk-btn").prop("disabled", true);\n  } else {\n    $form.find(".splunk-submit .splunk-btn").removeClass("sp-btn-solid sp-btn-pink");\n    $form.find(".splunk-submit .splunk-btn").addClass("sp-btn-hollow sp-btn-darkGray disabled");\n    $form.find(".splunk-submit .splunk-btn").prop("disabled", true);\n  }\n}\nfunction isFeatureFlagMktoPostEnabled() {\n  return !!featureFlagMktoRestEnable && featureFlagMktoRestEnable.mktoRestEnable;\n}\nfunction isGatedOrSalesForm() {\n  return getFormUsage === \'no\' || getFormUsage === \'yes\';\n}\nfunction redirectPage() {\n  formSubmitSuccessPush();\n  //logic to redirect user\n  if ($(\'form.inModal\')[0]) {\n    $(\'a#success-msg\').closest(\'.container\').show();\n    $(\'.modal-body .hero-component\').hide();\n  } else {\n    var targetEmailAddress = $("input[name=\'EmailAddress\']").val();\n    localStorage.setItem("nonGatedPassQuery", btoa(targetEmailAddress)); //WWW-26001: fixing broken mechanism to get contact id\n\n    var redirectPath = $("#" + getLPformID).data().redirect;\n    redirectPath = redirectPath.replace("/content/splunkcom", "");\n    window.location.href = isGatedOrSalesForm() ? redirectPath //+ "?email=" + targetEmailAddress WWW-26130\n    : redirectPath;\n  }\n}\n//WWW-1034: added phone extension (hidden field)\nfunction splitPhoneNo() {\n  // input[name="busPhone"] for landing page form\n  // input[name="phone"] for Ask an Expert/Talk to Sales form\n  if ($(\'input[name="busPhone"]\').length > 0 || $(\'input[name="phone"]\').length > 0) {\n    var $phoneInput = $(\'input[name="busPhone"]\').length > 0 ? $(\'input[name="busPhone"]\') : $(\'input[name="phone"]\');\n    $phoneInput.closest("form").find(\'input[type="hidden"]:last\').after(\'<input type="hidden" name="extension1">\');\n\n    //strip out the "+" sign (zero or more) at the beginning of the phone field value, then strip out the white space, (), or - sign\n    var phoneVal = $phoneInput.val().trim().replace(/^\\+*/, \'\').replace(/[\\s()\\-]/gi, \'\'),\n      splitRegEx = /\\+|\\.|ext|x|X/gi,\n      newPhoneVal = phoneVal.split(splitRegEx)[0],\n      extensionVal = phoneVal.split(splitRegEx)[1];\n    $phoneInput.val(newPhoneVal);\n    $(\'input[name="extension1"]\').val(extensionVal);\n  }\n}\n/**\n *Function to push Form Submit Success to dataLayer\n *\n */\nfunction formSubmitSuccessPush() {\n  var formName = $(\'div.splunk-form\').attr(\'data-form-usage\');\n  var formTypeName = $(\'div.splunk-form\').attr(\'data-form-usage\');\n  var leadValue = $("[name=LeadSource]").val();\n  var isModal;\n  var input_company_name = \'\';\n  var input_country_name = \'\';\n  var inputJobTitle = \'\';\n  if ($(\'input[name="company"]\').val()) {\n    input_company_name = $(\'input[name="company"]\').val();\n  } else if ($(\'input[name="Company"]\').val()) {\n    input_company_name = $(\'input[name="Company"]\').val();\n  }\n  if ($(\'[name="country"]\').val()) {\n    input_country_name = $(\'[name="country"]\').val();\n  } else if ($(\'[name="Country"]\').val()) {\n    input_country_name = $(\'[name="Country"]\').val();\n  }\n  if ($("[name=title]").val()) {\n    inputJobTitle = $(\'[name="title"]\').val();\n  } else if ($("[name=Title]").val()) {\n    inputJobTitle = $(\'[name="Title"]\').val();\n  }\n  if ($(\'.inModalWrapper\').length > 0) {\n    isModal = true;\n  } else {\n    isModal = false;\n  }\n  if (formSuccessSubmit) {\n    if (formName !== "gatedasset") {\n      formName = $(\'.splunk-form form\').attr(\'id\');\n    } else {\n      if (leadValue === undefined || leadValue.trim() == \'\') {\n        leadValue = "No Lead Source";\n      }\n      formName = "gated assets - (".concat(leadValue.toLowerCase(), ")");\n    }\n    var event_success = "formSubmitSuccess";\n    var event_submit = "formSubmit";\n    var EVENT_SUCCESS = {\n      event: event_submit,\n      eventInfo: {\n        formName: "" + formName,\n        ctaLabel: "" + sessionStorage.getItem("formCta") + " | Submit",\n        timeStart: "" + sessionStorage.getItem("formStart"),\n        timeCompletion: Math.floor(Date.now() / 1000),\n        component: "" + sessionStorage.getItem("component")\n      }\n    };\n    console.log("DATALAYER:---\x3e", EVENT_SUCCESS);\n    window.dataLayer.push(EVENT_SUCCESS);\n    EVENT_SUCCESS = {\n      event: event_success,\n      eventInfo: {\n        formName: "" + formName,\n        ctaLabel: "" + sessionStorage.getItem("formCta") + " | Submit",\n        timeStart: "" + sessionStorage.getItem("formStart"),\n        timeCompletion: Math.floor(Date.now() / 1000),\n        component: "" + sessionStorage.getItem("component")\n      }\n    };\n    var step_number = "";\n    if ($(this).parents(\'div\').attr(\'class\')) {\n      step_number = $(this).parents(\'div\').attr(\'class\');\n    }\n    var GA4_EVENT_SUCCESS = {\n      event: \'form_submit_success\',\n      form_name: \'\' + formName,\n      form_type: \'\' + formTypeName,\n      step_number: step_number,\n      cta_component: \'\' + sessionStorage.getItem("component"),\n      is_modal: isModal,\n      input_company_name: input_company_name,\n      input_country_name: input_country_name,\n      input_role: inputJobTitle,\n      time_to_complete: Math.floor(Date.now() / 1000) - sessionStorage.getItem("formStart")\n    };\n    window.dataLayer.push(GA4_EVENT_SUCCESS);\n    console.log("DATALAYER:---\x3e", EVENT_SUCCESS);\n    window.dataLayer.push(EVENT_SUCCESS);\n  }\n  formSuccessSubmit = false;\n}\n\n/*\n  Fuction to check if all fields verified in the Form\n*/\nfunction validateForm(ev, isSubmit) {\n  ///check all splunk-inputs\n  validations = {\n    inputs: false,\n    checkbox: false,\n    stateSelect: true,\n    //to re enable state validation make this false, and un-comment the state validation section\n    googlecaptcha: false\n  };\n  //check splunk-inputs\n  validations.inputs = $(".splunk-input.success").length == $(".splunk-input").length;\n\n  //check all checkboxes\n  var checked = false;\n  $("input[type=\'checkbox\']:visible").each(function () {\n    if ($(this).attr("name") != "optInFlag1") {\n      if (this.checked) {\n        checked = true;\n      } else {\n        checked = false;\n        return false;\n      }\n    }\n  });\n  validations.checkbox = checked;\n  if ($("input[type=\'checkbox\']").length <= 0) {\n    validations.checkbox = true;\n  }\n  /* -- commenting out state validation, will be guessed using service\n  if($("select").length <=0){\n    validations.stateSelect = true;\n  }\n   if($("#container-select-state").css("display") != "none") {\n    if($("#container-select-state").hasClass(\'success\')) {\n      validations.stateSelect = true;\n    }\n  } else {\n    $("#container-select-state").addClass(\'success\');\n  }\n  */\n\n  if ($(\'.g-recaptcha\').length <= 0 || grecaptcha.getResponse().length != 0) {\n    validations.googlecaptcha = true;\n  }\n\n  //WWW-125: enable sumbit button when $.cookie(\'_lp\') has value and in landing page\n  if ($(\'input[type="text"]\').length == 1) {\n    $(".splunk-input.email input, .splunk-input.input-email input").trigger(\'blur\');\n    if ($(\'.splunk-input.email, .splunk-input.input-email\').hasClass(\'error\') || $(\'input[type="text"]\').val().trim() == "") {\n      validations.inputs = false;\n    } else {\n      validations.inputs = true;\n    }\n    if (!isSubmit) {\n      enableSubmit();\n    }\n  }\n  if (validations.checkbox && validations.inputs && validations.googlecaptcha && (validations.stateSelect || $("#container-select-state").css("display") == "none")) {\n    return true;\n  } else {\n    ev.preventDefault(); // to stop the form from submitting\n    enableSubmit();\n    return false;\n  }\n}\nif (getFormUsage == "no" || getFormUsage === \'pledgeform\') {\n  // getFormUsage == "no": used for landing page form\n  $(function () {\n    //WWW-2690\n    if ((userStatusAPI.authenticated || userStatusAPI.cookied) && $.cookie(\'wcmmode\') != "edit" && $.cookie(\'wcmmode\') == undefined && getFormUsage != "yes" && getFormUsage != "datastore" && getFormUsage != "dataemail" && getFormUsage != "sfdcform") {\n      // move email prefill to user-status-api.js. Comment out the codes for now\n      // if(userStatusAPI.authenticated) {\n      //     $(".splunk-input.input-email input").val(userStatusAPI.userInfo.email).change();\n      // }\n      //WWW-1815\n      //check country in order to show DOI - even on Email-Only form.\n      var DOIForShortForm = function DOIForShortForm(tryNumber) {\n        if (typeof tryNumber === "undefined") {\n          tryNumber = 0;\n        }\n        var isUS = false;\n        var sixSenseLoaded = false;\n        try {\n          isUS = JSON.parse(localStorage.getItem(\'_6sense\')).country === "United States";\n          sixSenseLoaded = true;\n        } catch (e) {\n          console.log(e);\n          console.log("Error getting 6sense country");\n          sixSenseLoaded = false;\n        }\n        if (sixSenseLoaded) {\n          //continue normally\n          if (!isUS) {\n            if (!userStatusAPI.pp) {\n              //WWW-8031\n              $(".splunk-form .doi-checkbox").css("display", "block");\n              $(".splunk-form .doi-checkbox input").attr("value", "0");\n              $(".splunk-form .doi-checkbox input").removeAttr(\'checked\');\n            }\n          }\n        } else {\n          //wait half a second, then try again - but only if we tried less than 6 times\n          if (tryNumber < 6) {\n            setTimeout(function () {\n              tryNumber++;\n              DOIForShortForm(tryNumber);\n            }, 500);\n          }\n        }\n      };\n      //get removableElements\n      var removableElements = $("[data-removable=\'true\']");\n      if (removableElements.length > 0) {\n        //if there are elements flagged as removable, we will only remove flagged elements\n        removableElements.remove();\n        //$(\'[data-target="#terms-and-conditions"]\').parent().remove();\n      } else {\n        //else we do the same as before\n        $(\'.splunk-input.input-alphanumeric, .splunk-input.input-text, .splunk-input.input-phone, .splunk-input.input-select, .splunk-input.input-zipcode, .splunk-input.input-company, .splunk-input.input-company-gated\').remove();\n      }\n      $(\'[href="#terms-and-conditions"]\').parent().remove();\n      if (userStatusAPI.pp) {\n        $(\'[href="#subsidiaries"]\').parent().remove();\n      }\n      DOIForShortForm();\n      if ($(\'input[type="text"]\').val().trim() != "") {\n        enableSubmit();\n      }\n    }\n    var getAC = "";\n    if ($(\'input[name="AffiliateCode"]\').val() != " ") {\n      $(\'input[name="AffiliateCode"]\').val(getAC);\n    }\n    var getExpertCode = "";\n    if ($(\'input[name="expertCode"]\').val() != " ") {\n      $(\'input[name="expertCode"]\').val(getExpertCode);\n    }\n    var getRP = "";\n    if ($(\'input[name="ReferringPartner"]\').val() != " ") {\n      $(\'input[name="ReferringPartner"]\').val(getRP);\n    }\n    setTimeout(function () {\n      $("#" + getLPformID).ajaxForm({\n        beforeSubmit: function beforeSubmit(arr, $form, options) {\n          disableSubmit($form);\n        },\n        beforeSerialize: function beforeSerialize() {\n          splitPhoneNo(); //WWW-1034: added phone extension\n          //WWW-20786: for product tour forms\n          if ($(\'input[name="productTour"]\').length > 0) {\n            localStorage.setItem(\'productTour\', \'true\');\n          }\n          // getFormUsage=="datastore": used for MongoDB\n          $(\'form\').each(function () {\n            $(this).append(\'<input type="hidden" name="urlName" value=\' + window.location.href + \'>\');\n          });\n          if (getFormUsage == "datastore" || getFormUsage == "dataemail") {\n            var getTimeStamp = new Date(),\n              vGetMonth = getTimeStamp.getMonth() + 1;\n            vGetMonth < 10 && (vGetMonth = "0" + vGetMonth);\n            var vGetDate = getTimeStamp.getDate();\n            vGetDate < 10 && (vGetDate = "0" + vGetDate);\n            var vGetHours = getTimeStamp.getHours();\n            vGetHours < 10 && (vGetHours = "0" + vGetHours);\n            var vGetMinutes = getTimeStamp.getMinutes();\n            vGetMinutes < 10 && (vGetMinutes = "0" + vGetMinutes);\n            var vGetSeconds = getTimeStamp.getSeconds();\n            vGetSeconds < 10 && (vGetSeconds = "0" + vGetSeconds);\n            var vFormattedDateandTime = getTimeStamp.getFullYear() + vGetMonth + vGetDate + vGetHours + vGetMinutes + vGetSeconds;\n            $(\'<input>\').attr({\n              type: \'hidden\',\n              value: vFormattedDateandTime,\n              name: \'timeStamp\'\n            }).appendTo(\'form[id=\' + getLPformID + \']\');\n          }\n        },\n        success: function success(data, textStatus, jqXHR, $form) {\n          var reqStatus = jqXHR.status;\n          if (reqStatus === 200 || reqStatus === 201) {\n            $("#" + getLPformID).append(\'<input type="hidden" name="httpStatus" value="\' + reqStatus + \'"/>\');\n            if ($($form[0]).find(\'input[name="optInFlag1"]:not(#optInFlag1Hidden)\').val() === \'1\') {\n              //WWW-5737 verify privacy policy check\n              $.cookie(\'_pp\', $($form[0]).find(\'input[name="optInFlag1"]:not(#optInFlag1Hidden)\').val(), {\n                path: \'/\',\n                domain: ".splunk.com"\n              });\n            }\n            if (getFormUsage != "datastore" && getFormUsage != "dataemail") {\n              $.cookie(\'_lp\', window.location.pathname, {\n                path: \'/\',\n                domain: ".splunk.com"\n              });\n            }\n            // Hit Splunk logo image path to gather all data\n            $("#" + getLPformID).ajaxSubmit({\n              url: \'/content/dam/splunk2/images/logos/splunk-logo.svg?formdata\',\n              type: \'get\',\n              success: function success() {\n                redirectPage();\n              },\n              error: function error() {\n                redirectPage();\n              }\n            });\n            //WWW-6699\n            var targetEmailAddress = \' \'; /// need to read the value from hidden field\n            if (targetEmailAddress != null && getFormUsage != "dataemail") {\n              $("#" + getLPformID).ajaxSubmit({\n                url: \'/bin/splunk/standardform/dataemail\',\n                type: \'post\',\n                success: function success() {\n                  redirectPage();\n                },\n                error: function error() {\n                  redirectPage();\n                }\n              });\n            }\n          } else {\n            //WWW-18186 if status is different than 200 or 201, will send the logfailrequest.\n            if (getFormUsage != "datastore" && getFormUsage != "dataemail") {\n              $.cookie(\'_lp\', window.location.pathname, {\n                path: \'/\',\n                domain: ".splunk.com"\n              });\n            }\n            $("#" + getLPformID).append(\'<input type="hidden" name="httpStatus" value="\' + reqStatus + \'"/>\');\n            $("#" + getLPformID).ajaxSubmit({\n              url: \'https://www.splunk.com/logfailedrequest.html\',\n              type: \'get\'\n            });\n            setTimeout(function () {\n              formSubmitSuccessPush();\n              if ($(\'form.inModal\')[0]) {\n                $(\'a#success-msg\').closest(\'.container\').show();\n                $(\'.modal-body .hero-component\').hide();\n              } else {\n                var redirectPath = $("#" + getLPformID).data().redirect;\n                redirectPath = redirectPath.replace("/content/splunkcom", "");\n                window.location.href = redirectPath;\n              }\n            }, 500);\n          }\n        },\n        error: function error(req) {\n          /*\n          var modalId = \'formStatusMessage\';\n          var modalContent = \'Your submission was not successful due to a security policy of your browser. If you are on Private Mode, you will have to either disable Tracking Protection or submit on a non-private browser.\';\n          showTimeoutModal(modalId, modalContent);\n          */\n          //We will allow the user to be redirected - but we will log the failed request and create cookie\n          if (getFormUsage != "datastore" && getFormUsage != "dataemail") {\n            $.cookie(\'_lp\', window.location.pathname, {\n              path: \'/\',\n              domain: ".splunk.com"\n            });\n          }\n          $("#" + getLPformID).append(\'<input type="hidden" name="httpStatus" value="\' + req.status + \'"/>\');\n          $("#" + getLPformID).ajaxSubmit({\n            url: \'https://www.splunk.com/logfailedrequest.html\',\n            type: \'get\'\n          });\n          setTimeout(function () {\n            formSubmitSuccessPush();\n            if ($(\'form.inModal\')[0]) {\n              $(\'a#success-msg\').closest(\'.container\').show();\n              $(\'.modal-body .hero-component\').hide();\n            } else {\n              var redirectPath = $("#" + getLPformID).data().redirect;\n              redirectPath = redirectPath.replace("/content/splunkcom", "");\n              window.location.href = redirectPath;\n            }\n          }, 500);\n        }\n      });\n    }, 1000);\n  });\n}\n// for "Ask an Expert" form\nif (getFormUsage == "yes") {\n  //WWW-2690\n  //check if user is know, allowed to present ShortForm\n  if ((userStatusAPI.authenticated || userStatusAPI.cookied) && $.cookie(\'wcmmode\') != "edit" && $.cookie(\'wcmmode\') == undefined) {\n    //get removableElements\n    $(\'[data-target="#terms-and-conditions"]\').parent().remove();\n    var removableElements = $("[data-removable=\'true\']");\n    if (removableElements.length > 0) {\n      //if there are elements flagged as removable, we will use only removed the flagged elements\n      removableElements.remove();\n    }\n    // move email prefill to user-status-api.js. Comment out the codes for now\n    // if(userStatusAPI.authenticated) {\n    //     $(".splunk-input.input-email input").val(userStatusAPI.userInfo.email).change();\n    // }\n  }\n  $(function () {\n    $("#" + getLPformID).ajaxForm({\n      beforeSubmit: function beforeSubmit(arr, $form, options) {\n        disableSubmit($form);\n      },\n      beforeSerialize: function beforeSerialize() {\n        splitPhoneNo(); //WWW-1034: added phone extension\n      },\n      success: function success(data, textStatus, jqXHR) {\n        formSubmitSuccessPush();\n        var reqStatus = jqXHR.status;\n        if (reqStatus === 200 || reqStatus === 201) {\n          $("#" + getLPformID).append(\'<input type="hidden" name="httpStatus" value="\' + reqStatus + \'"/>\');\n          // Hit Splunk logo image path to gather all data\n          $("#" + getLPformID).ajaxSubmit({\n            url: \'/content/dam/splunk2/images/logos/splunk-logo.svg?formdata\',\n            type: \'get\',\n            success: function success() {\n              redirectPage();\n            },\n            error: function error() {\n              redirectPage();\n            }\n          });\n          //WWW-6699\n          var targetEmailAddress = \' \'; /// need to read the value from hidden field\n          if (targetEmailAddress != null) {\n            $("#" + getLPformID).ajaxSubmit({\n              url: \'/bin/splunk/standardform/dataemail\',\n              type: \'post\',\n              success: function success() {\n                redirectPage();\n              },\n              error: function error() {\n                redirectPage();\n              }\n            });\n          }\n          userStatusAPI.setShortFormCookie();\n        } else {\n          userStatusAPI.setShortFormCookie();\n          $("#" + getLPformID).append(\'<input type="hidden" name="httpStatus" value="\' + reqStatus + \'"/>\');\n          $("#" + getLPformID).ajaxSubmit({\n            url: \'https://www.splunk.com/logfailedrequest.html\',\n            type: \'get\'\n          });\n          setTimeout(function () {\n            formSubmitSuccessPush();\n            if ($(\'form.inModal\')[0]) {\n              $(\'a#success-msg\').closest(\'.container\').show();\n              $(\'.modal-body .hero-component\').hide();\n            } else {\n              var redirectPath = $("#" + getLPformID).data().redirect;\n              redirectPath = redirectPath.replace("/content/splunkcom", "");\n              window.location.href = redirectPath;\n            }\n          }, 500);\n        }\n      },\n      error: function error(req) {\n        /*\n        var modalId = \'formStatusMessage\';\n        var modalContent = \'Your submission was not successful due to a security policy of your browser. If you are on Private Mode, you will have to either disable Tracking Protection or submit on a non-private browser.\';\n        showTimeoutModal(modalId, modalContent);\n        */\n        //We will allow the user to be redirected - but we will log the failed request\n        userStatusAPI.setShortFormCookie();\n        $("#" + getLPformID).append(\'<input type="hidden" name="httpStatus" value="\' + req.status + \'"/>\');\n        $("#" + getLPformID).ajaxSubmit({\n          url: \'https://www.splunk.com/logfailedrequest.html\',\n          type: \'get\'\n        });\n        setTimeout(function () {\n          formSubmitSuccessPush();\n          if ($(\'form.inModal\')[0]) {\n            $(\'a#success-msg\').closest(\'.container\').show();\n            $(\'.modal-body .hero-component\').hide();\n          } else {\n            var redirectPath = $("#" + getLPformID).data().redirect;\n            redirectPath = redirectPath.replace("/content/splunkcom", "");\n            window.location.href = redirectPath;\n          }\n        }, 500);\n      }\n    });\n    $(\'form\').each(function () {\n      $(this).append(\'<input type="hidden" name="urlName" value=\' + window.location.href + \'>\');\n    });\n    setTimeout(function () {\n      autoPopulateCountry();\n    }, 2000);\n  });\n}\n// For Education form\nvar getdisabled;\nif (getFormUsage == "sfdcform") {\n  $(function () {\n    function applyInputStyles(target, value) {\n      $(target).val(value).css(\'padding-top\', \'15px\').attr(\'disabled\', \'\').parents(\'label\').addClass(\'success\').find(\'.placeholder\').css({\n        \'top\': \'5px\',\n        \'font-size\': \'12px\'\n      }).next().text(\'GOOD\').css(\'display\', \'block\');\n    }\n    function bindAjax() {\n      $(\'.splunk-form form\').each(function () {\n        var sfdcFormID = $(this).attr(\'id\');\n        $("#" + $(this).attr(\'id\')).ajaxForm({\n          beforeSubmit: function beforeSubmit(arr, $form, options) {\n            disableSubmit($form);\n          },\n          beforeSerialize: function beforeSerialize($form) {\n            getdisabled = $form.find(\':input:disabled\').removeAttr(\'disabled\');\n            var serialized = $form.serialize();\n          },\n          success: function success() {\n            formSubmitSuccessPush();\n            getdisabled.attr(\'disabled\', \'disabled\');\n            //Show thank you modal dialog\n            $(\'.splunk-superModal\').click();\n            $(\'#splunk-thankyou-modal-none\').modal(\'show\');\n          },\n          error: function error(req) {\n            /*\n              getdisabled.attr(\'disabled\',\'disabled\');\n              var modalId = \'formStatusMessage\';\n              var modalContent = \'Your submission was not successful due to a security policy of your browser. If you are on Private Mode, you will have to either disable Tracking Protection or submit on a non-private browser.\';\n              showTimeoutModal(modalId, modalContent);\n            */\n            //We will allow the user to continue normally - but we will log the failed request\n            $("#" + sfdcFormID).append(\'<input type="hidden" name="httpStatus" value="\' + req.status + \'"/>\');\n            $("#" + sfdcFormID).ajaxSubmit({\n              url: \'https://www.splunk.com/logfailedrequest.html\',\n              type: \'get\'\n            });\n            setTimeout(function () {\n              getdisabled.attr(\'disabled\', \'disabled\');\n              //Show thank you modal dialog\n              $(\'.splunk-superModal\').click();\n              $(\'#splunk-thankyou-modal-none\').modal(\'show\');\n            }, 500);\n          }\n        });\n      });\n    }\n    setTimeout(function () {\n      $(\'.splunk-form form\').each(function () {\n        if (typeof splunkDataLayer != "undefined" && typeof $.cookie("WEBID") != "undefined") {\n          if (typeof splunkDataLayer.firstname != "undefined") {\n            applyInputStyles("#" + $(this).attr(\'id\') + " #firstname-edu", splunkDataLayer.firstname);\n          }\n          if (typeof splunkDataLayer.lastname != "undefined") {\n            applyInputStyles("#" + $(this).attr(\'id\') + " #lastname-edu", splunkDataLayer.lastname);\n          }\n          if (typeof splunkDataLayer.email != "undefined") {\n            applyInputStyles("#" + $(this).attr(\'id\') + " #email-edu", splunkDataLayer.email);\n          }\n          if (typeof splunkDataLayer.uname != "undefined") {\n            applyInputStyles("#" + $(this).attr(\'id\') + " #username-edu", splunkDataLayer.uname);\n          }\n        }\n      });\n    }, 1000);\n    $("#").ajaxForm({});\n  });\n}\nif (getFormUsage == "dataemail" && typeof window.splunkCLLoaded === "undefined") {\n  $(function () {\n    $("#" + getLPformID).ajaxForm({\n      beforeSubmit: function beforeSubmit(arr, $form, options) {\n        disableSubmit($form);\n      },\n      beforeSerialize: function beforeSerialize() {\n        splitPhoneNo(); //WWW-1034: added phone extension\n      },\n      success: function success() {\n        formSubmitSuccessPush();\n        // Hit Splunk logo image path to gather all data\n        $("#" + getLPformID).ajaxSubmit({\n          url: \'/content/dam/splunk2/images/logos/splunk-logo.svg?formdata\',\n          type: \'get\',\n          success: function success() {\n            redirectPage();\n          },\n          error: function error() {\n            redirectPage();\n          }\n        });\n        userStatusAPI.setShortFormCookie();\n      },\n      error: function error(req) {\n        /*\n        var modalId = \'formStatusMessage\';\n        var modalContent = \'Your submission was not successful due to a security policy of your browser. If you are on Private Mode, you will have to either disable Tracking Protection or submit on a non-private browser.\';\n        showTimeoutModal(modalId, modalContent);\n        */\n        //We will allow the user to be redirected - but we will log the failed request\n        userStatusAPI.setShortFormCookie();\n        $("#" + getLPformID).append(\'<input type="hidden" name="httpStatus" value="\' + req.status + \'"/>\');\n        $("#" + getLPformID).ajaxSubmit({\n          url: \'https://www.splunk.com/logfailedrequest.html\',\n          type: \'get\'\n        });\n        setTimeout(function () {\n          formSubmitSuccessPush();\n          if ($(\'form.inModal\')[0]) {\n            $(\'a#success-msg\').closest(\'.container\').show();\n            $(\'.modal-body .hero-component\').hide();\n          } else {\n            var redirectPath = $("#" + getLPformID).data().redirect;\n            redirectPath = redirectPath.replace("/content/splunkcom", "");\n            window.location.href = redirectPath;\n          }\n        }, 500);\n      }\n    });\n    $(\'form\').each(function () {\n      $(this).append(\'<input type="hidden" name="urlName" value=\' + window.location.href + \'>\');\n    });\n    setTimeout(function () {\n      autoPopulateCountry();\n    }, 2000);\n  });\n}\n$(\'#terms-and-conditions-close-btn\').click(function (e) {\n  $(\'#terms-and-conditions\').modal(\'hide\');\n});\n$(\'#privacy-policy-close-btn\').click(function (e) {\n  $(\'#privacy-policy\').modal(\'hide\');\n});\n\n// Auto populate country\nfunction autoPopulateCountry() {\n  if (localStorage.getItem("_6sense") !== null) {\n    var getCountry = JSON.parse(localStorage.getItem(\'_6sense\'));\n    getCountry = getCountry.country;\n    if (getCountry == \'Japan\') {\n      $(\'.splunk-form #container-select-country .splunk-custom-select option[value="Japan"]\').text(\'日本 (Japan)\');\n      $(\'.splunk-form #container-select-country .splunk-custom-select\').val(getCountry).trigger(\'change\');\n      $(\'.splunk-form #container-select-country .splunk-custom-select-spanInner\').text(\'日本 (Japan)\');\n    } else {\n      //WWW-3489 - Forms submtted without countries\n      var optionExists = $(".splunk-form #container-select-country select.splunk-custom-select option[value=\'" + getCountry + "\']").length > 0;\n      if (!optionExists) {\n        //create option based on country that does not exist\n        $(\'.splunk-form #container-select-country select.splunk-custom-select\').append("<option value=\'" + getCountry + "\'>" + getCountry + "</option>");\n      }\n      $(\'.splunk-form #container-select-country select.splunk-custom-select\').val(getCountry).trigger(\'change\');\n      $(\'.splunk-form #container-select-country .splunk-custom-select-spanInner\').text($(\'.splunk-form #container-select-country option:selected\').text());\n    }\n    if (getCountry != \'United States\') {\n      if (!userStatusAPI.pp) {\n        $(".splunk-form .doi-checkbox").css("display", "block");\n        $(".splunk-form .doi-checkbox input").attr("value", "0");\n        $(".splunk-form .doi-checkbox input").removeAttr(\'checked\');\n      }\n    }\n  }\n}\n// remove div captcha if chinese site\nfunction removeCaptchaDiv() {\n  var lang = $(\'body\').attr(\'lang\');\n  if (lang && lang.indexOf(\'zh\') === 0) {\n    $(\'.g-recaptcha\').remove();\n  }\n}\n$(window).on("load", function () {\n  setTimeout(function () {\n    autoPopulateCountry();\n  }, 2000);\n  removeCaptchaDiv();\n});\n$(\'form#landingPageForm\').closest(\'.flex-container.base-component\').addClass(\'landingPageGated\');\nif (getFormUsage == "cloudtrial" && $.cookie(\'WEBID\') && $.cookie(\'wcmmode\') !== "edit" && $.cookie(\'wcmmode\') === undefined) {\n  var cloudThankypuPage = function cloudThankypuPage() {\n    var redirectPath = cloudUserThankyouPage.replace("/content/splunkcom", "");\n    window.location.href = redirectPath;\n  };\n  var cloudUserThankyouPage = "${properties.cloudThankyouPage @ context=\'scriptString\'}";\n  $(".splunk-submit button").click(function (e) {\n    e.preventDefault();\n    var cloudtrial = "";\n    if (typeof siteConfig.cloudtrial !== \'undefined\') {\n      // eslint-disable-line no-undef\n      cloudtrial = siteConfig.cloudtrial; // eslint-disable-line no-undef\n    } else {\n      // fallback when siteConfig is not defined\n      cloudtrial = \'/api/bin/product/cloudtrial\';\n    }\n    $.ajax({\n      cache: false,\n      url: cloudtrial,\n      type: "POST"\n    }).success(function (cloudTrialResponse) {\n      var response = JSON.parse(cloudTrialResponse);\n      if (response.status_code == \'200\') {\n        redirectPage();\n      }\n      if (response.status_code == \'409\' || response.status_code == \'500\') {\n        cloudThankypuPage();\n      }\n    }).error(function (error) {\n      console.log(\'An error occured during cloud trial download\');\n    });\n  });\n}\n// Loading required JS\n/*  if (getFormUsage == "cloudtrial") {\n     $(function() {\n         $.getScript(\'/etc/clientlibs/splunk/splunk-cl/source.js\');\n     });\n } */\n\nvar checkingDataLayer_timer = 0;\ndocument.addEventListener("DOMContentLoaded", function () {\n  var checkingDataLayer = setInterval(function () {\n    checkingDataLayer_timer++;\n    if (window.dataLayer !== undefined && typeof ga === \'function\') {\n      ga(function () {\n        var tracker = ga.getAll()[0];\n        var conversionId = "";\n        document.getElementById(\'GACLIENTID\').value = tracker.get(\'clientId\');\n        for (var b in dataLayer) {\n          if ("conversionId" == Object.keys(dataLayer[b])) {\n            clearInterval(checkingDataLayer);\n            conversionId = dataLayer[b].conversionId;\n          }\n        }\n        document.getElementById(\'conversionid\').value = conversionId;\n      });\n    } else {\n      //error handling\n      if (checkingDataLayer_timer > 10) {\n        clearInterval(checkingDataLayer);\n      }\n    }\n  }, 500);\n}, false);\n\n// WWW-17333: get contact ID\n// let params = new URLSearchParams(window.location.search);\nvar email = \'\';\nvar isThankyouPage = location.href.includes(\'thank\');\n// WWW-18945: FE - Pass Authorization token with getcontact & bform\nvar checkingSecureToken_timer = 0;\nvar secureToken = "";\nvar contactEndpoint = isFeatureFlagMktoPostEnabled() ? "/api/bin/lead/mkto/contact" : "/api/bin/lead/contact";\n\n// on the form pages, remove the old SECURE TOKEN, if it exists, but not on thank-you pages\nif (!isThankyouPage) {\n  localStorage.removeItem("SECURE_TOKEN");\n} else {\n  secureToken = localStorage.getItem("SECURE_TOKEN");\n}\nfunction handleEmailAddress(email) {\n  $.ajax({\n    url: window.location.origin + contactEndpoint + "?id=" + email,\n    headers: {\n      "Authorization": "Bearer " + secureToken\n    },\n    success: function success(data) {\n      var contactid;\n      if (isFeatureFlagMktoPostEnabled()) {\n        contactid = data.response.result[0].id;\n      } else {\n        contactid = data.elements[0].id;\n      }\n      localStorage.setItem("SPLUNK_CONTACTID", contactid);\n    }\n  });\n}\nfunction getContactId() {\n  if (email) {\n    setTimeout(function () {\n      console.log(\'setTimeout, email value\', email);\n      handleEmailAddress(email);\n    }, 3000);\n\n    // params.delete(\'email\');//remove the email querystring pair from the querystring\n    // let queryString = (params.toString().length === 0) ? \'\' : \'?\' + params.toString();\n    // history.pushState({}, "", window.location.origin + window.location.pathname + queryString);//display the new url without the email querystring pair in the address bar\n  }\n}\nfunction handleFormActionElqChange() {\n  $("#" + getLPformID).attr(\'action\', \'/api/bin/lead/form\');\n}\nfunction handleFormActionMktoChange() {\n  $("#" + getLPformID).attr(\'action\', \'/api/bin/lead/mkto/form\');\n}\nfunction getSecureToken() {\n  $.ajax({\n    url: "/api/bin/lead/auth/token",\n    success: function success(data) {\n      //console.log("token data.response:", data.response)\n      var token = data.response;\n      localStorage.setItem("SECURE_TOKEN", token);\n      secureToken = token;\n    },\n    error: function error() {\n      checkingSecureToken_timer++;\n      if (checkingSecureToken_timer < 10) {\n        getSecureToken();\n      }\n    }\n  });\n}\nif (isGatedOrSalesForm()) {\n  if (isThankyouPage) {\n    email = atob(localStorage.getItem("nonGatedPassQuery"));\n    localStorage.removeItem("nonGatedPassQuery");\n    getContactId(); // for thank-you pages only.\n  }\n  if (isFeatureFlagMktoPostEnabled()) {\n    handleFormActionMktoChange(); // change to Mkto REST api\n  } else {\n    handleFormActionElqChange(); // change to Eloqua REST api\n  }\n  if (secureToken === "") {\n    getSecureToken();\n  }\n}\n\n//WWW-20786: check if users have submitted a product tour form before\nfunction isAuthoring() {\n  var urlSearchParams = new URLSearchParams(window.location.search);\n  var params = Object.fromEntries(urlSearchParams.entries());\n  var AEMMode = $.cookie(\'wcmmode\');\n  var authoring = AEMMode === \'edit\' && !params.wcmmode;\n  var authoringViewAsPublished = params.wcmmode === \'disabled\';\n  return authoring || authoringViewAsPublished;\n}\nif (location.href.includes("/form/") && location.href.includes("-tour") && !isAuthoring()) {\n  var tourRedirectPath = $(".splunk-form form").attr(\'data-redirect\');\n  if (localStorage.getItem("productTour") !== null) {\n    location.href = tourRedirectPath;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///627\n')}});